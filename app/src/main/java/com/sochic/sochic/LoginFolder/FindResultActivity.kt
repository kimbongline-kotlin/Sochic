package com.sochic.sochic.LoginFolderimport android.net.Uriimport android.os.Bundleimport android.util.Logimport com.google.firebase.dynamiclinks.DynamicLinkimport com.google.firebase.dynamiclinks.FirebaseDynamicLinksimport com.sochic.sochic.BuildConfigimport com.sochic.sochic.Rimport com.sochic.sochic.Util.ApiMannager.TrueFalseAPIimport com.sochic.sochic.Util.ScActivityimport io.reactivex.observers.DisposableSingleObserverimport kotlinx.android.synthetic.main.activity_find_result.*class FindResultActivity : ScActivity() {    var email : String = ""    var date : String = ""    var getIdUser : String = ""    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_find_result)        supportActionBar!!.hide()        email = intent.getStringExtra("email")        date = intent.getStringExtra("date")        getIdUser = intent.getStringExtra("id_user")        backBtn.setOnClickListener {            finish()        }        emailLabel.setText("아이디 : $email")        dateLabel.setText("가입일시 : $date")        var build = Uri.parse("http://sochic.app-pick.com/m/").buildUpon().appendQueryParameter("idx",getIdUser).build().buildUpon().appendQueryParameter("type","find").build()        FirebaseDynamicLinks.getInstance().createDynamicLink()            .setLink(build)            .setDynamicLinkDomain("sochic.page.link")            .setLongLink(FirebaseDynamicLinks.getInstance().createDynamicLink().setLink(build).setDynamicLinkDomain("sochic.page.link")                .setAndroidParameters(DynamicLink.AndroidParameters.Builder(packageName).setMinimumVersion(1).build())                .setAndroidParameters(DynamicLink.AndroidParameters.Builder().build())                .setIosParameters(DynamicLink.IosParameters.Builder(BuildConfig.APPLICATION_ID)                    .setAppStoreId("").setMinimumVersion("1").build())                .setSocialMetaTagParameters(DynamicLink.SocialMetaTagParameters.Builder().setTitle("소식").setDescription("소식")                    .build()).buildDynamicLink().uri).buildShortDynamicLink().addOnCompleteListener(this) { task ->                run {                    Log.d("object","hihi")                    if (task.isSuccessful) {                        Log.d("object", task.getResult()!!.shortLink.toString())                        disposable.add(apiService.SEND_PASS_EMAIL_API(email,task.getResult()!!.shortLink.toString())                            .subscribeOn(io)                            .observeOn(thread)                            .subscribeWith(object : DisposableSingleObserver<TrueFalseAPI>() {                                override fun onError(e: Throwable?) {                                }                                override fun onSuccess(t: TrueFalseAPI?) {                                }                            }))                    }                }            }    }}